# ===========================
# Airflow DAG for LaTeX Compilation and GitHub Upload
# Author: Marcelo Martins
# Description:
# - This DAG monitors changes in a LaTeX (.tex) file with a custom operator.
# - When a change is detected, it triggers a Docker container that tries to compile the .tex into a PDF.
# - If the PDF is successfully generated, it uploads the file to GitHub.
# - If the PDF is not generated, the upload to GitHub is skipped.
# - The DAG then restarts itself to listen for further modifications.
# - After 10 minutes without modifications in the .tex file, the DAG finishes.
# ===========================

from airflow import DAG

# Operators
from airflow.providers.docker.operators.docker import DockerOperator
from airflow.operators.trigger_dagrun import TriggerDagRunOperator
from airflow.operators.python import BranchPythonOperator
from sensors.file_change_sensor import FileChangeSensor
from airflow.utils.trigger_rule import TriggerRule
from airflow.operators.bash import BashOperator

# Auxiliary libraries
from datetime import datetime
from docker.types import Mount
import os

# Auxiliary paths
cv_file_name_pdf = f'{os.getenv('FILE_NAME')}.pdf' # PDF file path
cv_file_name_tex = f'{os.getenv('FILE_NAME')}.tex' # .tex file path
input_path = os.path.join(os.getenv('ROOT_PATH'), 'latex/input') # Full path used by DockerOperator
output_path = os.path.join(os.getenv('ROOT_PATH'), 'latex/output') # Full path used by DockerOperator
include_path = os.path.join(os.getenv('ROOT_PATH'), 'include') # Full path used by DockerOperator
pdf_path = os.path.join('latex/output', cv_file_name_pdf) # Relative path for the pdf file
upload_git_script_path = '/usr/local/airflow/include/git_upload.sh' # Full path used by BashOperator

def check_pdf_existance():
    """
    This function checks if the compiled PDF file exists.
    If the PDF is found, it returns the task 'send_to_github'.
    If the PDF is missing, it triggers another DAG run, which skipps the upload to github.
    """
    if os.path.exists(pdf_path):
        return 'send_to_github'

    return 'trigger_next_run'

# Default arguments for DAG
default_args = {
    'owner': 'airflow',
    'start_date': datetime(2023, 1, 1),
    'retries': 1,
}

with DAG(
    dag_id='latex_compilation',
    default_args=default_args,
    schedule_interval=None,
    catchup=False,
) as dag:
    
    # ===========================
    # Task 1: Custom operator that checks, after 'poke_interval' seconds if a file was modified until 'timeout'
    # ===========================
    changed_file = FileChangeSensor(
        task_id='check_changed_file',
        filepath=os.path.join('latex/input/', cv_file_name_tex),
        poke_interval=10,
        timeout=600,
        mode='poke',
    )
    
    # ===========================
    # Task 2: Operator that creates a Docker conteiner based on a image and runs a command
    # In this case, creates a conteiner with texlive installed and converts the data to PDF
    # ===========================
    compile_latex = DockerOperator(
        task_id='compile_latex',
        image='latex_compiler', # The image created by Dockerfile.latex
        api_version='auto',
        auto_remove='success', # Removes the conteiner after a successful execution
        # Command that validates and converts the .tex into a pdf. It also deletes all the auxiliary files generated by pdflatex cli (.out, .log, .aux)
        command="sh -c 'sh /latex/include/validate_tex.sh && rm -f /latex/output/*.aux /latex/output/*.log /latex/output/*.out'",
        docker_url="unix://var/run/docker.sock", # The sock for Docker
        network_mode="bridge",
        mounts=[ # Mount the local directories inside the conteiner. It needs absolute paths
            Mount(source=input_path, target="/latex/input", type="bind"),
            Mount(source=output_path, target="/latex/output", type="bind"),
            Mount(source=include_path, target="/latex/include", type="bind"),
        ],
        environment={ # Passing the necessary environment variable from .env
            'FILE_NAME': os.getenv('FILE_NAME')
        },
        mount_tmp_dir=False,
    )

    # ===========================
    # Task 3: Decide which branch to take
    # If the PDF was generated, branch to send_to_github
    # Else, branch to trigger_next_run
    # ===========================
    branch = BranchPythonOperator(
        task_id='pdf_was_generated',
        python_callable=check_pdf_existance
    )

    # ===========================
    # Task 4: Calls the script that uploads the file to github
    # ===========================
    send_to_github = BashOperator(
        task_id='send_to_github',
        bash_command=f'sh {upload_git_script_path} '
    )

    # ===========================
    # Task 5: Created another run of the DAG, creating a 'fake' loop
    # ===========================
    trigger = TriggerDagRunOperator(
        task_id='trigger_next_run',
        trigger_dag_id='latex_compilation',
        reset_dag_run=True,
        trigger_rule=TriggerRule.ONE_SUCCESS
    )

    # ===========================
    # DAG Task Dependencies
    # ===========================
    changed_file >> compile_latex >> branch
    branch >> [send_to_github, trigger]
    send_to_github >> trigger